<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tka&#39;s blog</title>
    <link>http://blog.tka.lu/</link>
    <description>Recent content on tka&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 14 Oct 2015 23:22:22 +0800</lastBuildDate>
    <atom:link href="http://blog.tka.lu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PostgreSQL 中利用 trigger 來維護 nested set 結構</title>
      <link>http://blog.tka.lu/post/2015-10-14-postgresql-nested-set-trigger/</link>
      <pubDate>Wed, 14 Oct 2015 23:22:22 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2015-10-14-postgresql-nested-set-trigger/</guid>
      <description>&lt;p&gt;Ref.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4048151/what-are-the-options-for-storing-hierarchical-data-in-a-relational-database&#34;&gt;http://stackoverflow.com/questions/4048151/what-are-the-options-for-storing-hierarchical-data-in-a-relational-database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/postgresqlnestedsetstriggers/&#34;&gt;https://sites.google.com/site/postgresqlnestedsetstriggers/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;調整出來比較順手的版本, 只需要設定 node 的 left 就會調整好資料結構&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE OR REPLACE FUNCTION items_nested_set_handler() RETURNS TRIGGER AS $$
DECLARE
  set_size INTEGER;
  set_offset INTEGER;
  mid_lft INTEGER;
  mid_rgt INTEGER;
BEGIN

  --------------------------INSERT---------------
  IF (TG_OP = &#39;INSERT&#39;) THEN
    UPDATE items SET
      lft = CASE WHEN lft &amp;gt;=  NEW.lft THEN lft+2 ELSE lft END,
      rgt = CASE WHEN rgt &amp;gt;= NEW.lft THEN rgt+2 ELSE rgt END
    WHERE foldr_id = NEW.foldr_id;

    UPDATE items SET lft = NEW.lft, rgt = (NEW.lft+1) WHERE id=NEW.id;


  --------------------------DELETE---------------
  ELSIF (TG_OP = &#39;DELETE&#39;) THEN
    DELETE FROM items WHERE lft BETWEEN OLD.lft AND OLD.rgt AND foldr_id = OLD.foldr_id;

    UPDATE items SET
      lft = CASE WHEN lft &amp;gt; OLD.lft THEN lft - (OLD.rgt - OLD.lft + 1) ELSE lft END,
      rgt = CASE WHEN rgt &amp;gt; OLD.lft THEN rgt - (OLD.rgt - OLD.lft + 1) ELSE rgt END
    WHERE foldr_id = OLD.foldr_id;

  -------------------------UPDATE----------------
  ELSIF (TG_OP = &#39;UPDATE&#39;) THEN
    IF (OLD.lft != NEW.lft) THEN
      set_size := OLD.rgt - OLD.lft + 1;
      mid_lft := CASE WHEN NEW.lft &amp;gt; OLD.lft THEN OLD.lft ELSE OLD.lft + set_size END;
      mid_rgt := CASE WHEN NEW.lft &amp;gt; OLD.lft THEN OLD.rgt ELSE OLD.rgt + set_size END;
      set_offset := NEW.lft - mid_lft ;

      UPDATE items SET lft = OLD.lft WHERE id = OLD.id; -- recovery item lft

      UPDATE items SET
        lft = CASE WHEN lft &amp;gt;= NEW.lft THEN lft + set_size ELSE lft END,
        rgt = CASE WHEN rgt &amp;gt;= NEW.lft THEN rgt + set_size ELSE rgt END
      WHERE foldr_id = OLD.foldr_id;

      UPDATE items SET
        lft = lft + set_offset, rgt = rgt + set_offset
      WHERE lft BETWEEN mid_lft AND mid_rgt AND foldr_id = OLD.foldr_id;

      UPDATE items SET
        lft = CASE WHEN lft &amp;gt; mid_lft THEN lft - set_size ELSE lft END,
        rgt = CASE WHEN rgt &amp;gt; mid_lft THEN rgt - set_size ELSE rgt END
      WHERE foldr_id = OLD.foldr_id;

    END IF;
  END IF;

  RETURN NULL;
END;
$$ language plpgsql;
-- +goose StatementEnd

DROP TRIGGER IF EXISTS items_nested_set_trigger ON items;

CREATE TRIGGER items_nested_set_trigger
AFTER INSERT OR UPDATE OR DELETE ON items
FOR EACH ROW WHEN (pg_trigger_depth() = 0) EXECUTE PROCEDURE items_nested_set_handler();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用 Golang 的 Shared Library 來幫 Ruby 專案加速</title>
      <link>http://blog.tka.lu/post/2015-07-16-ruby-and-golang-shared-library/</link>
      <pubDate>Thu, 16 Jul 2015 13:03:04 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2015-07-16-ruby-and-golang-shared-library/</guid>
      <description>&lt;p&gt;Golang 日前釋放出了 1.5 Beta 1, 已經可以將 Golang 的程式編成 shared library 來給其他程式呼叫&lt;/p&gt;

&lt;p&gt;相關的範例可以參考 &lt;a href=&#34;http://qiita.com/yanolab/items/1e0dd7fd27f19f697285&#34;&gt;http://qiita.com/yanolab/items/1e0dd7fd27f19f697285&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不過這該文章中是使用 python 呼叫 golang 的程式&lt;/p&gt;

&lt;p&gt;如果是用 ruby 的話, 可以透過 ffi &lt;a href=&#34;https://github.com/ffi/ffi&#34;&gt;https://github.com/ffi/ffi&lt;/a&gt; 來做到&lt;/p&gt;

&lt;p&gt;寫起來大致上是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;ffi&#39;
require &#39;benchmark&#39;

module LibGo
  extend FFI::Library
  ffi_lib &#39;./libgo.so&#39;
  attach_function :fib, [:int], :int

end

def fib(i)
  return i if i &amp;lt; 2
  return fib(i-2)+fib(i-1)
end

n=10000
Benchmark.bm do |x|
  x.report{ n.times{ fib(16); }}
  x.report{ n.times{ LibGo.fib(16) }}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Benchmark 的結果則是快了將近 20 倍&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ser     system      total        real
1.130000   0.000000   1.130000 (  1.132376)
0.060000   0.000000   0.060000 (  0.068342)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這顯示如果拿 golang 來幫 ruby 程式中的演算法加速應該可以取得不小的效果&lt;/p&gt;

&lt;p&gt;接下來看另一個例子, 從 Accept-Language 中挑出適合的語言&lt;/p&gt;

&lt;p&gt;Golang 的部份&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;C&amp;quot;
    &amp;quot;golang.org/x/text/language&amp;quot;
    &amp;quot;log&amp;quot;
)

var (
    mather = language.NewMatcher([]language.Tag{language.Make(&amp;quot;en&amp;quot;), language.Make(&amp;quot;ja&amp;quot;), language.Make(&amp;quot;zh-TW&amp;quot;), language.Make(&amp;quot;zh-CN&amp;quot;)
})
)

//export preferredLanguageFrom
func preferredLanguageFrom(httpAcceptLanguage *string) *string {

    tag, _, _ := language.ParseAcceptLanguage(*httpAcceptLanguage)
    t, _, _ := mather.Match(tag...)
    l := t.String()
    return &amp;amp;l
}

//export preferredLanguageFromUseCString
func preferredLanguageFromUseCString(cHttpAcceptLanguage *C.char) *C.char {
    httpAcceptLanguage := C.GoString(cHttpAcceptLanguage)

    tag, _, _ := language.ParseAcceptLanguage(httpAcceptLanguage)
    t, _, _ := mather.Match(tag...)
    return C.CString(t.String())
}

func init() {
    log.Println(&amp;quot;Loaded!!&amp;quot;)
}

func main() {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby 的部份&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;ffi&#39;
require &#39;benchmark&#39;

# gem &#39;http_accept_language&#39;
require &#39;http_accept_language/parser&#39;

module LibGo

  class GoString &amp;lt; FFI::Struct
    layout :p, :pointer,
      :n, :int
  end

  extend FFI::Library
  ffi_lib &#39;./libgo.so&#39;

  attach_function :preferredLanguageFrom, [GoString.by_ref], GoString.by_ref
  attach_function :preferredLanguageFromUseCString, [:string], :string
end

@lang = &amp;quot;en;q=0.9,zh;q=0.8,en-US;q=0.6,en-GB;q=0.2&amp;quot;
@availables = %w(en ja zh-CN zh-TW )

def use_go
  x = LibGo::GoString.new
  x[:p] = FFI::MemoryPointer.from_string(@lang)
  x[:n] = @lang.length
  result =  LibGo.preferredLanguageFrom( x )
  result[:p].get_string(0, result[:n])
end

def use_go_cstring
  LibGo.preferredLanguageFromUseCString( @lang )
end

def use_ruby
  parser = HttpAcceptLanguage::Parser.new(@lang)
  parser.preferred_language_from( @availables )
end

n=100000

Benchmark.bm do |x|
  x.report{ n.times{ use_go() }}
  x.report{ n.times{ use_go_cstring() }}
  x.report{ n.times{ use_ruby() }}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;跑出來的結果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       user     system      total        real
   1.210000   0.030000   1.240000 (  1.111699)
   0.960000   0.050000   1.010000 (  0.885242)
   1.400000   0.000000   1.400000 (  1.399969)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在這個例子裡面 golang 依然比 ruby 快了不少,
不過可以看到用 GoString 這個 struct 的時候會花掉比較多的時間
推測是 ruby 中把字串轉成 struct 的時候比較慢, 所以改用 CString 來傳遞的話就還可以壓榨出額外的效能&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 webpack 取代 Rails Asset Pipeline</title>
      <link>http://blog.tka.lu/post/2015-07-13-rails-and-webpack/</link>
      <pubDate>Mon, 13 Jul 2015 22:24:44 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2015-07-13-rails-and-webpack/</guid>
      <description>&lt;p&gt;Rails 的 Asset Pipeline 十分好用, 但是跟 webpack 比起來還是有不小的落差&lt;/p&gt;

&lt;p&gt;所以研究了一下把 Rails 前端的部份整個換成 webpack 的方法&lt;/p&gt;

&lt;p&gt;希望達到的目標有&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;原本在 app/assets 下的東西還是放在下面&lt;/li&gt;
&lt;li&gt;原本使用的 helper 名稱繼續沿用&lt;/li&gt;
&lt;li&gt;建立出來的檔案有打上 digest&lt;/li&gt;
&lt;li&gt;特定的 third party js 跟 images 不需要透過 require 處理, 只需直接將檔名打上 digest&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;調整的設定檔大致上就是 &lt;a href=&#34;https://gist.github.com/tka/45f2923236ad615dcdd5&#34;&gt;https://gist.github.com/tka/45f2923236ad615dcdd5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原理是&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;webpack 輸出檔案到 /public/assets 下&lt;/li&gt;
&lt;li&gt;透過 static_resources.js 把 third party js 跟 image 都 requie 進來, 然後用 file-loader 輸出成檔案&lt;/li&gt;
&lt;li&gt;webpack 跑完之後讓他吐一個 manifest.json 然後改寫 rails helper 改成從 manifest.json 內拿到編譯完的檔案名稱&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如此初步看起來就可以滿足需求了, 下個專案有機會的話就來實戰看看&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Postgresql Advisory Lock 測試</title>
      <link>http://blog.tka.lu/post/2015-03-25-pg-advisory-lock-benchmark/</link>
      <pubDate>Wed, 25 Mar 2015 02:53:09 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2015-03-25-pg-advisory-lock-benchmark/</guid>
      <description>&lt;p&gt;前兩天聊天的時候聊到 Postgresql Advisory Lock&lt;/p&gt;

&lt;p&gt;功能的介紹可以參考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.postgresql.org/docs/9.4/static/explicit-locking.html#ADVISORY-LOCKS&#34;&gt;http://www.postgresql.org/docs/9.4/static/explicit-locking.html#ADVISORY-LOCKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hashrocket.com/blog/posts/advisory-locks-in-postgres&#34;&gt;http://hashrocket.com/blog/posts/advisory-locks-in-postgres&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這邊直接看簡單的測試結果&lt;/p&gt;

&lt;p&gt;pgbench 初始化參數是 &lt;code&gt;pgbench -Upostgres -i -s 10&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先看單純 select for update 的測試script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BEGIN;
    update pgbench_accounts set abalance = 1 where aid = (select aid from pgbench_accounts where abalance = 0 limit 1 for update );
    \sleep 1 ms
END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這邊測試裡面加了 sleep 1 ms 的原因是為了讓測試結果比較像是真實的使用情境, 在 update 完資料到 commit 之間可能還會做些事情, 這邊就假設多用了 1ms 吧&lt;/p&gt;

&lt;p&gt;結果是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tarting vacuum...end.
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 200
number of threads: 1
number of transactions per client: 100
number of transactions actually processed: 20000/20000
latency average: 0.000 ms
tps = 823.817249 (including connections establishing)
tps = 829.889465 (excluding connections establishing)
statement latencies in milliseconds:
        0.105646        BEGIN;
        122.298852          update pgbench_accounts set abalance = 1 where aid = (select aid from pgbench_accounts where abalance = 0 limit 1 for update );
        1.083191            \sleep 1 ms
        0.072635        END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再看用了 advisory lock 的測試script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BEGIN;
   update pgbench_accounts set abalance = 1 where aid = (select  aid  from pgbench_accounts where abalance = 0 and  pg_try_advisory_xact_lock(aid) limit 1 for update);
   \sleep 1 ms
END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;starting vacuum...end.
transaction type: Custom query
scaling factor: 1
query mode: simple
number of clients: 200
number of threads: 1
number of transactions per client: 100
number of transactions actually processed: 20000/20000
latency average: 0.000 ms
tps = 7411.739157 (including connections establishing)
tps = 7914.144198 (excluding connections establishing)
statement latencies in milliseconds:
        0.940393        BEGIN;
        19.822141           update pgbench_accounts set abalance = 1 where aid = (select  aid  from pgbench_accounts where abalance = 0 and  pg_try_advisory_xact_lock(aid) limit 1 for update);
        1.283840            \sleep 1 ms
        1.779052        END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比較一下兩邊 tps 的結果 823 vs 7411&lt;/p&gt;

&lt;p&gt;也就是說用了 advisory lock 後 tps 大概快了 8 倍&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Arch Linux 字型設定</title>
      <link>http://blog.tka.lu/post/2013-08-26-archlinux-zi-xing-she-ding/</link>
      <pubDate>Mon, 26 Aug 2013 23:33:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2013-08-26-archlinux-zi-xing-she-ding/</guid>
      <description>&lt;p&gt;用了好一陣子的 Arch Linux 搭 KDE, 最近裝新機器時又覺得字型怎麼調都不對, 之前都是採用 &lt;a href=&#34;https://wiki.archlinux.org/index.php/Font_Configuration#Ubuntu&#34;&gt;Ubuntu 的字型解決方案&lt;/a&gt; 不過這次怎麼調都不順眼, 乾脆改用 &lt;a href=&#34;https://wiki.archlinux.org/index.php/Font_Configuration#Infinality&#34;&gt;Infinality 的方案&lt;/a&gt;,
直接安裝打包好的整包套件 &lt;a href=&#34;https://wiki.archlinux.org/index.php/Font_Configuration#Install_from_custom_repository&#34;&gt;infinality-bundle&lt;/a&gt;.
然後在 &lt;code&gt;~/.config/fontconfig/fonts.conf&lt;/code&gt; 裡面加入習慣的字型順序, 像是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;alias binding=&amp;quot;strong&amp;quot;&amp;gt;
    &amp;lt;family&amp;gt;serif&amp;lt;/family&amp;gt;
    &amp;lt;prefer&amp;gt;
      &amp;lt;family&amp;gt;DejaVu Serif&amp;lt;/family&amp;gt;
      &amp;lt;family&amp;gt;Droid Sans Fallback&amp;lt;/family&amp;gt;
    &amp;lt;/prefer&amp;gt;
  &amp;lt;/alias&amp;gt;

  &amp;lt;alias binding=&amp;quot;strong&amp;quot;&amp;gt;
    &amp;lt;family&amp;gt;sans-serif&amp;lt;/family&amp;gt;
    &amp;lt;prefer&amp;gt;
      &amp;lt;family&amp;gt;DejaVu Sans&amp;lt;/family&amp;gt;
      &amp;lt;family&amp;gt;Droid Sans Fallback&amp;lt;/family&amp;gt;
    &amp;lt;/prefer&amp;gt;
  &amp;lt;/alias&amp;gt;

  &amp;lt;alias binding=&amp;quot;strong&amp;quot;&amp;gt;
    &amp;lt;family&amp;gt;monospace&amp;lt;/family&amp;gt;
    &amp;lt;prefer&amp;gt;
      &amp;lt;family&amp;gt;DejaVu Sans Mono&amp;lt;/family&amp;gt;
      &amp;lt;family&amp;gt;Droid Sans Fallback&amp;lt;/family&amp;gt;
    &amp;lt;/prefer&amp;gt;
  &amp;lt;/alias&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本上效果還不錯, 應該會先用一陣子, 哪天不順眼了再調整&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>從 windows8 iso 檔建立安裝隨身碟</title>
      <link>http://blog.tka.lu/post/2013-08-24-cong-windows8-iso-dang-jian-li-an-zhuang-sui-shen-die/</link>
      <pubDate>Sat, 24 Aug 2013 00:13:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2013-08-24-cong-windows8-iso-dang-jian-li-an-zhuang-sui-shen-die/</guid>
      <description>&lt;p&gt;步驟大致上是&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;挑隻4G以上的隨身碟&lt;/li&gt;
&lt;li&gt;把隨身碟格式化成 NTFS 格式&lt;/li&gt;
&lt;li&gt;sudo mount -o loop windows8.iso /mnt/win_iso&lt;/li&gt;
&lt;li&gt;cp -R /mnt/win_iso/* usb_disk&lt;/li&gt;
&lt;li&gt;sudo sync&lt;/li&gt;
&lt;li&gt;sudo ms-sys -7 /dev/usb_disk&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>設定YARD環境</title>
      <link>http://blog.tka.lu/post/2013-08-21-she-ding-yardhuan-jing/</link>
      <pubDate>Wed, 21 Aug 2013 03:13:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2013-08-21-she-ding-yardhuan-jing/</guid>
      <description>&lt;p&gt;添加專案中的 &lt;code&gt;Gemfile&lt;/code&gt; 與 &lt;code&gt;.yardopts&lt;/code&gt; 如下&lt;/p&gt;

&lt;p&gt;Gemfile&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :development do
  gem &#39;guard&#39;
  gem &#39;guard-yard&#39;
  gem &#39;redcarpet&#39;
  gem &#39;github-markup&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.yardopts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;--markup-provider=redcarpet
--markup=markdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下來執行 &lt;code&gt;guard init yard&lt;/code&gt; 初始化 guard 的環境,
之後只需要執行 &lt;code&gt;guard start&lt;/code&gt; 便可監控檔案異動, 立刻透過 YARD 產生文件&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ruby-tuesday-25-分享</title>
      <link>http://blog.tka.lu/post/2013-08-10-ruby-tuesday-25-fen-xiang/</link>
      <pubDate>Sat, 10 Aug 2013 15:55:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2013-08-10-ruby-tuesday-25-fen-xiang/</guid>
      <description>&lt;p&gt;上個月底在 Tuby Tuesday 25 分享了, 利用 ruby library 實作 Collaborative Filtering 推薦系統的心得&lt;/p&gt;

&lt;p&gt;投影片如下&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4f5346c0db6301305e137a9184b31ee5&#34; data-ratio=&#34;1.33507170795306&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Mahout 搭配 JRuby 建立環境與簡單測試</title>
      <link>http://blog.tka.lu/post/2012-10-14-jian-li-mahout-huan-jing/</link>
      <pubDate>Sun, 14 Oct 2012 11:22:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2012-10-14-jian-li-mahout-huan-jing/</guid>
      <description>

&lt;h1 id=&#34;建立環境:39c51cddf9d8befaa56d8c9c678b90e8&#34;&gt;建立環境&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;下載&amp;amp;安裝 Mahout

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/MAHOUT/BuildingMahout&#34;&gt;https://cwiki.apache.org/confluence/display/MAHOUT/BuildingMahout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下載&amp;amp;安裝 Hadoop

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apache.org/dyn/closer.cgi/hadoop/common/&#34;&gt;http://www.apache.org/dyn/closer.cgi/hadoop/common/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;單機安裝步驟 &lt;a href=&#34;http://hadoop.apache.org/common/docs/stable/single_node_setup.html&#34;&gt;http://hadoop.apache.org/common/docs/stable/single_node_setup.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;設定 ClASSPATH&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt; export CLASSPATH=.:~/Project/Mahout/mahout-distribution-0.7/mahout-core-0.7.jar:~/Project/Mahout/mahout-distribution-0.7/mahout-math-0.7.jar:~/Project/Mahout/mahout-distribution-0.7/lib/&#39;*&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;簡單測試:39c51cddf9d8befaa56d8c9c678b90e8&#34;&gt;簡單測試&lt;/h1&gt;

&lt;p&gt;可以從 &lt;a href=&#34;https://github.com/tdunning/MiA&#34;&gt;https://github.com/tdunning/MiA&lt;/a&gt; 下載 Mahout in Action 的範例程式, 這邊選擇第2章的 &lt;a href=&#34;https://github.com/tdunning/MiA/blob/mahout-0.7/src/main/java/mia/recommender/ch02/RecommenderIntro.java&#34;&gt;RecommenderIntro.java&lt;/a&gt; 來將他改寫為 JRuby 的版本, 改寫的結果如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;java&#39;

module Mahout
  include_package &amp;quot;org.apache.mahout.cf.taste.impl.model.file&amp;quot;;
  include_package &amp;quot;org.apache.mahout.cf.taste.impl.neighborhood&amp;quot;;
  include_package &amp;quot;org.apache.mahout.cf.taste.impl.recommender&amp;quot;;
  include_package &amp;quot;org.apache.mahout.cf.taste.impl.similarity&amp;quot;;
  include_package &amp;quot;org.apache.mahout.cf.taste.model&amp;quot;;
  include_package &amp;quot;org.apache.mahout.cf.taste.neighborhood&amp;quot;;
  include_package &amp;quot;org.apache.mahout.cf.taste.recommender&amp;quot;;
  include_package &amp;quot;org.apache.mahout.cf.taste.similarity&amp;quot;;

end

model = Mahout::FileDataModel.new( java.io.File.new(&amp;quot;intro.csv&amp;quot;));

similarity = Mahout::PearsonCorrelationSimilarity.new(model);
neighborhood = Mahout::NearestNUserNeighborhood.new(2, similarity, model);

recommender = Mahout::GenericUserBasedRecommender.new( model, neighborhood, similarity);

recommendation =recommender.recommend(1, 1);

puts recommendation

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Java7 &#43; JRuby 1.7.0.preview2 &#43; Rawr</title>
      <link>http://blog.tka.lu/post/2012-08-24-java7-plus-jruby-1-dot-7-0-dot-preview2-plus-rawr/</link>
      <pubDate>Fri, 24 Aug 2012 22:16:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2012-08-24-java7-plus-jruby-1-dot-7-0-dot-preview2-plus-rawr/</guid>
      <description>&lt;p&gt;這兩天試著把 &lt;a href=&#34;http://fireapp.handlino.com/&#34;&gt;Fire.app&lt;/a&gt; 升級到 &lt;a href=&#34;http://jruby.org/&#34;&gt;JRuby&lt;/a&gt; 1.7.0.preview2, 過程中遇到一些 ruby 1.8.7 升級到 1.9.3 的小問題, 不過解決起來還算順手。後來同事想試試看搭配 Java7 的效果如何這時候就遇到問題了。&lt;/p&gt;

&lt;p&gt;原因在於之前打包是使用 &lt;a href=&#34;https://github.com/rawr/rawr&#34;&gt;Rawr&lt;/a&gt;, 但是他使用的 &lt;a href=&#34;http://launch4j.sourceforge.net/&#34;&gt;launch4j&lt;/a&gt; 在 OS X 上面搭配 Java7 打包出來的程式無法順利執行。 看起來是因為　Java7 不是 apple 放出來的版本造成的。所以必須要改用 &lt;a href=&#34;http://java.net/projects/appbundler&#34;&gt;Java Application Bundler&lt;/a&gt;, 這邊最簡單的方法就是一樣用 Rawr 建立 jar 檔, 然後改寫　rawr:bundle:app 這個 rake task 就好了。&lt;/p&gt;

&lt;p&gt;主要需要處理的部份有&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;移動程式目錄裡面的 &lt;code&gt;Contents/Resources/Java&lt;/code&gt; 到 &lt;code&gt;Contents/Java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;複製 Java Application Bundler 專案中的 &lt;code&gt;JavaAppLauncher&lt;/code&gt; 這個檔案到 &lt;code&gt;Contents/MacOS&lt;/code&gt; 目錄下&lt;/li&gt;
&lt;li&gt;改寫 &lt;code&gt;Contents/Info.plist&lt;/code&gt; 的部份內容如下, 這邊的細節可以參考 Java Application Bundler 的文件跟 source&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;key&amp;gt;CFBundleExecutable&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;JavaAppLauncher&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;JVMMainClassName&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;com.handlino.fireapp.Main&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;JVMOptions&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
      &amp;lt;key&amp;gt;-XstartOnFirstThread&amp;lt;/key&amp;gt; 
    &amp;lt;/array&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;做好這些步驟之後, 就可以像過去一樣輕鬆的打包出各個平台使用 Java7 + JRuby 1.7.0.preview2 程式&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rack 技巧</title>
      <link>http://blog.tka.lu/post/2012-08-13-rack-auth-ji-qiao/</link>
      <pubDate>Mon, 13 Aug 2012 12:58:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2012-08-13-rack-auth-ji-qiao/</guid>
      <description>

&lt;p&gt;最近比較常發佈基於 serve 的 rack app 到 heroku 上面, 通常是網站的 prototype.&lt;/p&gt;

&lt;p&gt;常常因為網站不公開, 所以需要特定的人才看的到.&lt;/p&gt;

&lt;p&gt;這時候只需要加一下 rack middleware 就可以達到這個需求&lt;/p&gt;

&lt;h3 id=&#34;使用-rack-auth-basic:1124f57adb991e1c7ea2ffc148819e87&#34;&gt;使用 Rack::Auth::Basic&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Rack::Auth::Basic, &amp;quot;Snack cabinet&amp;quot; do |username, password|
  username == &#39;admin&#39; &amp;amp;&amp;amp; password == &#39;foobar&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用-warden:1124f57adb991e1c7ea2ffc148819e87&#34;&gt;使用 Warden&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;require &amp;quot;warden&amp;quot;
class FailLoginApp
  def self.call(env)

    [200, { &amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;text/html&amp;quot; }, [&amp;lt;&amp;lt;EOL
      &amp;lt;html&amp;gt;
      &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Login&amp;lt;/h1&amp;gt;
      &amp;lt;form action=&amp;quot;/&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    username:&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;&amp;gt;

    password:&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
EOL
    ]]  
  end 
end

class CheckLogin

  def initialize(app, opts={})
    @app=app
    @opts=opts
  end

  def call(env)
    request = Rack::Request.new(env)

    env[&#39;warden&#39;].logout if request.params[&amp;quot;logout&amp;quot;]
    env[&#39;warden&#39;].authenticate!

    @app.call(env)
  end
end

Warden::Strategies.add(:password) do
  def valid?
    params[&amp;quot;username&amp;quot;] || params[&amp;quot;password&amp;quot;]
  end

  def authenticate!
    if params[&amp;quot;username&amp;quot;] == &amp;quot;admin&amp;quot; &amp;amp;&amp;amp; params[&amp;quot;password&amp;quot;] == &amp;quot;foobar&amp;quot;  
      success!({})
    else
      fail!(&amp;quot;Could not log in&amp;quot;)
    end
  end
end

use Rack::Session::Cookie

use Warden::Manager do |manager|
  manager.default_strategies :password
  manager.failure_app = FailLoginApp
end

use CheckLogin
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2012 JavaTwo</title>
      <link>http://blog.tka.lu/post/2012-08-07-2012-javatwo/</link>
      <pubDate>Tue, 07 Aug 2012 22:39:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2012-08-07-2012-javatwo/</guid>
      <description>&lt;p&gt;今年 7月 20 日很幸運的有機會在 JavaTwo 大會上跟 @weijen 合講了一個關於 JRuby 的 session&lt;/p&gt;

&lt;p&gt;我的部份投影片如下&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5021266316e890000205c801&#34; data-ratio=&#34;1.3333333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>將 Rails 專案中使用的 MySQL 轉移到 PostgreSQL</title>
      <link>http://blog.tka.lu/post/2012-04-16-jiang-rails-zhuan-an-zhong-ji-you-de-mysql-zi-liao-zhuan-yi-dao-postgresql/</link>
      <pubDate>Mon, 16 Apr 2012 15:13:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2012-04-16-jiang-rails-zhuan-an-zhong-ji-you-de-mysql-zi-liao-zhuan-yi-dao-postgresql/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;開一個新的 Rails 專案, DB 使用 PostgreSQL&lt;/li&gt;
&lt;li&gt;將舊專案中的 db/schema.rb 改寫成新專案中的 db migration&lt;/li&gt;
&lt;li&gt;在新專案中跑 &lt;code&gt;rake db:migrate&lt;/code&gt; 建立 PostgreSQL 中的資料庫&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://github.com/maxlapshin/mysql2postgres&#34;&gt;mysql2postgres&lt;/a&gt; 做轉移

&lt;ul&gt;
&lt;li&gt;因為 db schema 已經透過 Rails 機制完成轉移, 這邊轉移時只需要轉資料部份&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>elasticsearch入門筆記(2)</title>
      <link>http://blog.tka.lu/post/2012-02-22-elasticsearchru-men-bi-ji-2/</link>
      <pubDate>Sun, 26 Feb 2012 04:16:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2012-02-22-elasticsearchru-men-bi-ji-2/</guid>
      <description>

&lt;h2 id=&#34;field-種類:98c38dbcb71233e7f9b62c45085c2bbf&#34;&gt;field 種類&lt;/h2&gt;

&lt;p&gt;來源: &lt;a href=&#34;http://www.elasticsearch.org/guide/reference/mapping/core-types.html&#34;&gt;http://www.elasticsearch.org/guide/reference/mapping/core-types.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要的資料格式摘要如下, 其他還有不少種類的資料格式可用.
其他詳細的內容需要參考, 該頁面右邊 Types 下面的分類(這裡的Types是指欄位的種類 )
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;string&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;float, double, byte, short, integer, long&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;boolean&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;data&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;binary&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&amp;lt;!&amp;ndash; more &amp;ndash;&amp;gt;&lt;/p&gt;

&lt;h2 id=&#34;multi-field-欄位格式:98c38dbcb71233e7f9b62c45085c2bbf&#34;&gt;multi_field 欄位格式&lt;/h2&gt;

&lt;p&gt;在許多field 種類中要特別提到的是multi_field, multi_field 可以做到的功能是u在建立 document 時, 將特定欄位給予多個 analyer(負責分詞的角色) 如此便可滿足中英文混雜的文章搜尋需求。&lt;/p&gt;

&lt;p&gt;例如 &lt;code&gt;elasticsearch遠比上Google搜尋更有效率&lt;/code&gt; 需要在下列幾種輸入時都會被搜尋到&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;elast&lt;/code&gt;或是&lt;code&gt;elasticsearch&lt;/code&gt;: 只輸入了單字的前幾個字, 或是完整單字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;更有效率&lt;/code&gt; 中文句子&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這時候就可以將欄位設定成 multi_field, 並且設定兩個不同的分詞方式 &lt;code&gt;cjk&lt;/code&gt; 與 &lt;code&gt;edgeNGram&lt;/code&gt;, 其中 &lt;code&gt;cjk&lt;/code&gt; 會對中文的內容用 &lt;code&gt;nGram&lt;/code&gt; 進行切詞, 而 &lt;code&gt;edgeNGram&lt;/code&gt; 則會建立 &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;el&lt;/code&gt;, &lt;code&gt;ela&lt;/code&gt;, &lt;code&gt;elas&lt;/code&gt;, &lt;code&gt;elast&lt;/code&gt;&amp;hellip;. 的切詞&lt;/p&gt;

&lt;p&gt;另外要注意的事情是 multi_field 裏面建立的欄位並不包括在預設的搜尋欄位&lt;code&gt;_all&lt;/code&gt;中, 必須要特別指定才會被搜尋到&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>elasticsearch入門筆記(1)</title>
      <link>http://blog.tka.lu/post/2012-02-22-elasticsearchru-men-bi-ji-1/</link>
      <pubDate>Sat, 25 Feb 2012 16:08:00 +0800</pubDate>
      
      <guid>http://blog.tka.lu/post/2012-02-22-elasticsearchru-men-bi-ji-1/</guid>
      <description>

&lt;h2 id=&#34;角色關係對照:74d1c7f17977e78f5dc1bb90e8606647&#34;&gt;角色關係對照&lt;/h2&gt;

&lt;p&gt;elasticsearch 跟 MySQL 中定義資料格式的角色關係對照表如下&lt;/p&gt;

&lt;table class=&#34;midden center&#34;&gt;
  &lt;thead&gt;&lt;tr&gt;&lt;th&gt;MySQL&lt;/th&gt;&lt;th&gt;elasticsearch&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;database&lt;/td&gt;     &lt;td&gt;index&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;table&lt;/td&gt;        &lt;td&gt;type&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;table schema&lt;/td&gt; &lt;td&gt;mapping&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;row&lt;/td&gt;          &lt;td&gt;document&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;field&lt;/td&gt;        &lt;td&gt;field&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;設定檔與目錄配置:74d1c7f17977e78f5dc1bb90e8606647&#34;&gt;設定檔與目錄配置&lt;/h2&gt;

&lt;p&gt;參考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/reference/setup/dir-layout.html&#34;&gt;http://www.elasticsearch.org/guide/reference/setup/dir-layout.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/reference/setup/configuration.html&#34;&gt;http://www.elasticsearch.org/guide/reference/setup/configuration.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;建立-index:74d1c7f17977e78f5dc1bb90e8606647&#34;&gt;建立 index&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;curl -XPUT &#39;http://localhost:9200/my_index_name/&#39;&lt;/code&gt; 這邊的 &lt;code&gt;my_index_name&lt;/code&gt; 就是要被建立的 index 的名字&lt;/p&gt;

&lt;h2 id=&#34;設定-index:74d1c7f17977e78f5dc1bb90e8606647&#34;&gt;設定 index&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -XPUT &#39;localhost:9200/my_index_name/_settings&#39; -d &#39;
{
    &amp;quot;index&amp;quot; : {
        &amp;quot;number_of_replicas&amp;quot; : 4
    }
}
&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以設定的參數在 &lt;a href=&#34;http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings.html&#34;&gt;這頁&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;建立-type-與-mapping:74d1c7f17977e78f5dc1bb90e8606647&#34;&gt;建立 type 與 mapping&lt;/h2&gt;

&lt;p&gt;在預設的情況下 elasticsearch 會自動建立 type 跟 mapping, 但是我會建議自行定義 mapping 的內容, 因為這樣可以做出比較符合需求的設定,例如不同的欄位要使用不同的分詞方式&lt;/p&gt;

&lt;p&gt;下面的範例中 &lt;code&gt;my_index_name&lt;/code&gt;, &lt;code&gt;my_type_name&lt;/code&gt;, &lt;code&gt;my_field_name&lt;/code&gt; 都是自己命名的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -XPUT &#39;http://localhost:9200/my_index_name/my_type_name/_mapping&#39; -d &#39;
{
    &amp;quot;my_type_name&amp;quot; : {
        &amp;quot;properties&amp;quot; : {
            &amp;quot;my_field_name&amp;quot; : {&amp;quot;type&amp;quot; : &amp;quot;string&amp;quot;, &amp;quot;store&amp;quot; : &amp;quot;yes&amp;quot;},
            &amp;quot;my_field_name2&amp;quot; : {&amp;quot;type&amp;quot; : &amp;quot;string&amp;quot;, &amp;quot;store&amp;quot; : &amp;quot;yes&amp;quot;},
            &amp;quot;my_field_name3&amp;quot; : {&amp;quot;type&amp;quot; : &amp;quot;date&amp;quot;, &amp;quot;store&amp;quot; : &amp;quot;yes&amp;quot;}
        }
    }
}
&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每個欄位的定義, 會像是 &lt;code&gt;&amp;quot;my_field_name&amp;quot; : {&amp;quot;type&amp;quot; : &amp;quot;string&amp;quot;, &amp;quot;store&amp;quot; : &amp;quot;yes&amp;quot;}&lt;/code&gt; 這樣子,
常用的欄位格式定義可以參考&lt;a href=&#34;http://www.elasticsearch.org/guide/reference/mapping/core-types.html&#34;&gt;這頁&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;建立搜尋資料:74d1c7f17977e78f5dc1bb90e8606647&#34;&gt;建立搜尋資料&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -XPOST &#39;localhost:9200/my_index_name/my_type_name/1&#39; -d &#39; 
{
    &amp;quot;my_field_name&amp;quot; : &amp;quot;test&amp;quot;,
    &amp;quot;my_field_name2&amp;quot;: &amp;quot;test2&amp;quot;,
    &amp;quot;my_fidle_name3&amp;quot;: &amp;quot;2012-02-1&amp;quot;
}
&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;my_index_name/my_type_name/1&lt;/code&gt; 中的&lt;code&gt;1&lt;/code&gt;代表的是這比資料的&lt;code&gt;id&lt;/code&gt;, 建議寫入資料庫裏面的 primaty key, 如果沒有設定的話, 會自動產生像是&lt;code&gt;EYQqF6eyTJGJ-6aZiIYZsg&lt;/code&gt;的內容&lt;/p&gt;

&lt;h2 id=&#34;搜尋資料:74d1c7f17977e78f5dc1bb90e8606647&#34;&gt;搜尋資料&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -XPOST &#39;localhost:9200/my_index_name/my_type_name/_search&#39; -d &#39;
{ 
    &amp;quot;query&amp;quot;:{ 
        &amp;quot;text&amp;quot;:{ &amp;quot;_all&amp;quot;:&amp;quot;test&amp;quot;}
    }
}
&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;詳細搜尋的語法需參考&lt;a href=&#34;http://www.elasticsearch.org/guide/reference/query-dsl/&#34;&gt;這頁&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>